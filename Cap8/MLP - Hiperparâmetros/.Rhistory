devtools::install_github('rstudio/keras')
devtools::install_github('rstudio/keras')
install.packages('rlang')
devtools::install_github('rstudio/keras')
library('keras')
install_keras(tensorflow = 'gpu')
install.packages(“devtools”)
install.packages('devtools')
library(devtools)
install.packages('reticulate')
library(reticulate)
install_github(“rstudio/keras”)
install_github('rstudio/keras')
library(keras)
install_keras(tensorflow = “gpu”)
install_keras(tensorflow = 'gpu')
load("~/PGMC - 2017-2021/Tese/Códigos/cod7091219b.RData")
library(nlcor)
library(fastDummies)
library(ggplot2)
library(keras)
library(nlcor)
library(fastDummies)
library(ggplot2)
library(keras)
set.seed(4488)
units2 <- runif(3,min=33,max=64)
results_hu2_list <- time_hu2_list <- all_mape_histories_hu2_list <- list()
for(t in 1:11) {
temp <- data_temps[,temp_names[z]]
Xt         <- temp[which(data_loads$day > (fd-1) & data_loads$day < (ld-1))]
Xt24       <- matrix(Xt, ncol=24, byrow = T)
Xt_hoje   <- temp[which(data_loads$day > (fd-2) & data_loads$day < (ld-2))]
Xt_hoje24 <- matrix(Xt_hoje, ncol=24, byrow = T)
Xt_ontem   <- temp[which(data_loads$day > (fd-3) & data_loads$day < (ld-3))]
Xt_ontem24 <- matrix(Xt_ontem, ncol=24, byrow = T)
week                <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'weekday']
week_dummies        <- dummy_cols(week)
week_dummies        <- week_dummies[,-1]
names(week_dummies) <- paste('x',as.character(1:7),sep = '')
week_dummies1 <- matrix(week_dummies$x1, ncol=24, byrow = T)
week_dummies1 <- week_dummies1[,1]
week_dummies2 <- matrix(week_dummies$x2, ncol=24, byrow = T)
week_dummies2 <- week_dummies2[,1]
week_dummies3 <- matrix(week_dummies$x3, ncol=24, byrow = T)
week_dummies3 <- week_dummies3[,1]
week_dummies4 <- matrix(week_dummies$x4, ncol=24, byrow = T)
week_dummies4 <- week_dummies4[,1]
week_dummies5 <- matrix(week_dummies$x5, ncol=24, byrow = T)
week_dummies5 <- week_dummies5[,1]
week_dummies6 <- matrix(week_dummies$x6, ncol=24, byrow = T)
week_dummies6 <- week_dummies6[,1]
week_dummies7 <- matrix(week_dummies$x7, ncol=24, byrow = T)
week_dummies7 <- week_dummies7[,1]
season <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'season']
season_dummies <- dummy_cols(season)
season_dummies <- season_dummies[,-1]
names(season_dummies) <- paste('x',as.character(1:4),sep = '')
season_dummies1 <- matrix(season_dummies$x1, ncol=24, byrow = T)
season_dummies1 <- season_dummies1[,1]
season_dummies2 <- matrix(season_dummies$x2, ncol=24, byrow = T)
season_dummies2 <- season_dummies2[,1]
season_dummies3 <- matrix(season_dummies$x3, ncol=24, byrow = T)
season_dummies3 <- season_dummies3[,1]
season_dummies4 <- matrix(season_dummies$x4, ncol=24, byrow = T)
season_dummies4 <- season_dummies4[,1]
X24 <- cbind(Xt_ontem24,
Xt_hoje24,
Xt24,
Y_hoje24,
Y_ontem24,
week_dummies1,
week_dummies2,
week_dummies3,
week_dummies4,
week_dummies5,
week_dummies6,
week_dummies7,
season_dummies1,
season_dummies2,
season_dummies3,
season_dummies4)
colnames(X24) <- paste('X',as.character(1:131),sep='')
results_hu2 <- time_hu2 <- c()
all_mape_histories_hu2 <- list()
for(h in units2) {
#mape_histories_e <- list()
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = h, activation = "relu",
input_shape = c(131),kernel_initializer=init[1]) %>%
layer_dense(units = 24)
model %>% compile(
optimizer = optimizer[1],
loss = "mse",
metrics = c("mape")
)
}
all_mape_hu2 <- NULL
start_time <- Sys.time()
for(i in 1:35) {
cat("Temp ", t, "Hu2 ", h, ": processando amostra de validação #", i, "\n")
indices_train <- indices_tr[[i]]
indice_v      <- indices_val[i]
partial_train_data <- X24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_data           <- X24[which(month_sum24[,1] == indice_v),]
partial_train_targets <- Y24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_targets           <- Y24[which(month_sum24[,1] == indice_v ,),]
mean <- apply(partial_train_data,2,mean)
sd   <- apply(partial_train_data,2,sd)
partial_train_data <- scale(partial_train_data, center = mean, scale = sd)
val_data           <- scale(val_data, center = mean, scale = sd)
model <- build_model()
k_set_value(model$optimizer$lr, lr_final[t])
history <- model %>% fit(
partial_train_data, partial_train_targets,
validation_data = list(val_data, val_targets),
epochs = epochs_final[t], batch.size = batch_final[t], verbose = 0
)
all_mape_hu2  <- c(all_mape_hu2,history$metrics$val_mape[epochs_final[t]])
#mape_histories_e <- c(mape_histories_e,data.frame(history))
}
results_hu2 <- rbind(results_hu2,c(h,median(all_mape_hu2,na.rm=T),mean(all_mape_hu2,na.rm=T),sd(all_mape_hu2,na.rm=T),min(all_mape_hu2,na.rm=T),max(all_mape_hu2,na.rm=T)))
all_mape_histories_hu2 <- c(all_mape_histories_hu2,all_mape_hu2)
#all_mape_histories_e <- c(all_mape_histories_e,list(mape_histories_e))
end_time <- Sys.time()
time_hu2 <- c(time_hu2,(end_time - start_time))
}
results_hu2_list[[t]] <- results_hu2
time_hu2_list[[t]] <- time_hu2
all_mape_histories_hu2_list[[t]] <- all_mape_histories_hu2
}
sample(33,64,3)
sample(3,33,64)
sample(33:64,3)
set.seed(4488)
units2 <- sample(33:64,3)
results_hu2_list <- time_hu2_list <- all_mape_histories_hu2_list <- list()
for(t in 1:11) {
temp <- data_temps[,temp_names[z]]
Xt         <- temp[which(data_loads$day > (fd-1) & data_loads$day < (ld-1))]
Xt24       <- matrix(Xt, ncol=24, byrow = T)
Xt_hoje   <- temp[which(data_loads$day > (fd-2) & data_loads$day < (ld-2))]
Xt_hoje24 <- matrix(Xt_hoje, ncol=24, byrow = T)
Xt_ontem   <- temp[which(data_loads$day > (fd-3) & data_loads$day < (ld-3))]
Xt_ontem24 <- matrix(Xt_ontem, ncol=24, byrow = T)
week                <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'weekday']
week_dummies        <- dummy_cols(week)
week_dummies        <- week_dummies[,-1]
names(week_dummies) <- paste('x',as.character(1:7),sep = '')
week_dummies1 <- matrix(week_dummies$x1, ncol=24, byrow = T)
week_dummies1 <- week_dummies1[,1]
week_dummies2 <- matrix(week_dummies$x2, ncol=24, byrow = T)
week_dummies2 <- week_dummies2[,1]
week_dummies3 <- matrix(week_dummies$x3, ncol=24, byrow = T)
week_dummies3 <- week_dummies3[,1]
week_dummies4 <- matrix(week_dummies$x4, ncol=24, byrow = T)
week_dummies4 <- week_dummies4[,1]
week_dummies5 <- matrix(week_dummies$x5, ncol=24, byrow = T)
week_dummies5 <- week_dummies5[,1]
week_dummies6 <- matrix(week_dummies$x6, ncol=24, byrow = T)
week_dummies6 <- week_dummies6[,1]
week_dummies7 <- matrix(week_dummies$x7, ncol=24, byrow = T)
week_dummies7 <- week_dummies7[,1]
season <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'season']
season_dummies <- dummy_cols(season)
season_dummies <- season_dummies[,-1]
names(season_dummies) <- paste('x',as.character(1:4),sep = '')
season_dummies1 <- matrix(season_dummies$x1, ncol=24, byrow = T)
season_dummies1 <- season_dummies1[,1]
season_dummies2 <- matrix(season_dummies$x2, ncol=24, byrow = T)
season_dummies2 <- season_dummies2[,1]
season_dummies3 <- matrix(season_dummies$x3, ncol=24, byrow = T)
season_dummies3 <- season_dummies3[,1]
season_dummies4 <- matrix(season_dummies$x4, ncol=24, byrow = T)
season_dummies4 <- season_dummies4[,1]
X24 <- cbind(Xt_ontem24,
Xt_hoje24,
Xt24,
Y_hoje24,
Y_ontem24,
week_dummies1,
week_dummies2,
week_dummies3,
week_dummies4,
week_dummies5,
week_dummies6,
week_dummies7,
season_dummies1,
season_dummies2,
season_dummies3,
season_dummies4)
colnames(X24) <- paste('X',as.character(1:131),sep='')
results_hu2 <- time_hu2 <- c()
all_mape_histories_hu2 <- list()
for(h in units2) {
#mape_histories_e <- list()
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = h, activation = "relu",
input_shape = c(131),kernel_initializer=init[1]) %>%
layer_dense(units = 24)
model %>% compile(
optimizer = optimizer[1],
loss = "mse",
metrics = c("mape")
)
}
all_mape_hu2 <- NULL
start_time <- Sys.time()
for(i in 1:35) {
cat("Temp ", t, "Hu2 ", h, ": processando amostra de validação #", i, "\n")
indices_train <- indices_tr[[i]]
indice_v      <- indices_val[i]
partial_train_data <- X24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_data           <- X24[which(month_sum24[,1] == indice_v),]
partial_train_targets <- Y24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_targets           <- Y24[which(month_sum24[,1] == indice_v ,),]
mean <- apply(partial_train_data,2,mean)
sd   <- apply(partial_train_data,2,sd)
partial_train_data <- scale(partial_train_data, center = mean, scale = sd)
val_data           <- scale(val_data, center = mean, scale = sd)
model <- build_model()
k_set_value(model$optimizer$lr, lr_final[t])
history <- model %>% fit(
partial_train_data, partial_train_targets,
validation_data = list(val_data, val_targets),
epochs = epochs_final[t], batch.size = batch_final[t], verbose = 0
)
all_mape_hu2  <- c(all_mape_hu2,history$metrics$val_mape[epochs_final[t]])
#mape_histories_e <- c(mape_histories_e,data.frame(history))
}
results_hu2 <- rbind(results_hu2,c(h,median(all_mape_hu2,na.rm=T),mean(all_mape_hu2,na.rm=T),sd(all_mape_hu2,na.rm=T),min(all_mape_hu2,na.rm=T),max(all_mape_hu2,na.rm=T)))
all_mape_histories_hu2 <- c(all_mape_histories_hu2,all_mape_hu2)
#all_mape_histories_e <- c(all_mape_histories_e,list(mape_histories_e))
end_time <- Sys.time()
time_hu2 <- c(time_hu2,(end_time - start_time))
}
results_hu2_list[[t]] <- results_hu2
time_hu2_list[[t]] <- time_hu2
all_mape_histories_hu2_list[[t]] <- all_mape_histories_hu2
}
library(nlcor)
library(fastDummies)
library(ggplot2)
library(keras)
set.seed(4488)
units2 <- sample(33:64,3)
results_hu2_list <- time_hu2_list <- all_mape_histories_hu2_list <- list()
for(t in 1:11) {
temp <- data_temps[,temp_names[z]]
Xt         <- temp[which(data_loads$day > (fd-1) & data_loads$day < (ld-1))]
Xt24       <- matrix(Xt, ncol=24, byrow = T)
Xt_hoje   <- temp[which(data_loads$day > (fd-2) & data_loads$day < (ld-2))]
Xt_hoje24 <- matrix(Xt_hoje, ncol=24, byrow = T)
Xt_ontem   <- temp[which(data_loads$day > (fd-3) & data_loads$day < (ld-3))]
Xt_ontem24 <- matrix(Xt_ontem, ncol=24, byrow = T)
week                <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'weekday']
week_dummies        <- dummy_cols(week)
week_dummies        <- week_dummies[,-1]
names(week_dummies) <- paste('x',as.character(1:7),sep = '')
week_dummies1 <- matrix(week_dummies$x1, ncol=24, byrow = T)
week_dummies1 <- week_dummies1[,1]
week_dummies2 <- matrix(week_dummies$x2, ncol=24, byrow = T)
week_dummies2 <- week_dummies2[,1]
week_dummies3 <- matrix(week_dummies$x3, ncol=24, byrow = T)
week_dummies3 <- week_dummies3[,1]
week_dummies4 <- matrix(week_dummies$x4, ncol=24, byrow = T)
week_dummies4 <- week_dummies4[,1]
week_dummies5 <- matrix(week_dummies$x5, ncol=24, byrow = T)
week_dummies5 <- week_dummies5[,1]
week_dummies6 <- matrix(week_dummies$x6, ncol=24, byrow = T)
week_dummies6 <- week_dummies6[,1]
week_dummies7 <- matrix(week_dummies$x7, ncol=24, byrow = T)
week_dummies7 <- week_dummies7[,1]
season <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'season']
season_dummies <- dummy_cols(season)
season_dummies <- season_dummies[,-1]
names(season_dummies) <- paste('x',as.character(1:4),sep = '')
season_dummies1 <- matrix(season_dummies$x1, ncol=24, byrow = T)
season_dummies1 <- season_dummies1[,1]
season_dummies2 <- matrix(season_dummies$x2, ncol=24, byrow = T)
season_dummies2 <- season_dummies2[,1]
season_dummies3 <- matrix(season_dummies$x3, ncol=24, byrow = T)
season_dummies3 <- season_dummies3[,1]
season_dummies4 <- matrix(season_dummies$x4, ncol=24, byrow = T)
season_dummies4 <- season_dummies4[,1]
X24 <- cbind(Xt_ontem24,
Xt_hoje24,
Xt24,
Y_hoje24,
Y_ontem24,
week_dummies1,
week_dummies2,
week_dummies3,
week_dummies4,
week_dummies5,
week_dummies6,
week_dummies7,
season_dummies1,
season_dummies2,
season_dummies3,
season_dummies4)
colnames(X24) <- paste('X',as.character(1:131),sep='')
results_hu2 <- time_hu2 <- c()
all_mape_histories_hu2 <- list()
for(h in units2) {
#mape_histories_e <- list()
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = h, activation = "relu",
input_shape = c(131),kernel_initializer=init[1]) %>%
layer_dense(units = 24)
model %>% compile(
optimizer = optimizer[1],
loss = "mse",
metrics = c("mape")
)
}
all_mape_hu2 <- NULL
start_time <- Sys.time()
for(i in 1:35) {
cat("Temp ", t, "Hu2 ", h, ": processando amostra de validação #", i, "\n")
indices_train <- indices_tr[[i]]
indice_v      <- indices_val[i]
partial_train_data <- X24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_data           <- X24[which(month_sum24[,1] == indice_v),]
partial_train_targets <- Y24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_targets           <- Y24[which(month_sum24[,1] == indice_v ,),]
mean <- apply(partial_train_data,2,mean)
sd   <- apply(partial_train_data,2,sd)
partial_train_data <- scale(partial_train_data, center = mean, scale = sd)
val_data           <- scale(val_data, center = mean, scale = sd)
model <- build_model()
k_set_value(model$optimizer$lr, lr_final[t])
history <- model %>% fit(
partial_train_data, partial_train_targets,
validation_data = list(val_data, val_targets),
epochs = epochs_final[t], batch.size = batch_final[t], verbose = 0
)
all_mape_hu2  <- c(all_mape_hu2,history$metrics$val_mape[epochs_final[t]])
#mape_histories_e <- c(mape_histories_e,data.frame(history))
}
results_hu2 <- rbind(results_hu2,c(h,median(all_mape_hu2,na.rm=T),mean(all_mape_hu2,na.rm=T),sd(all_mape_hu2,na.rm=T),min(all_mape_hu2,na.rm=T),max(all_mape_hu2,na.rm=T)))
all_mape_histories_hu2 <- c(all_mape_histories_hu2,all_mape_hu2)
#all_mape_histories_e <- c(all_mape_histories_e,list(mape_histories_e))
end_time <- Sys.time()
time_hu2 <- c(time_hu2,(end_time - start_time))
}
results_hu2_list[[t]] <- results_hu2
time_hu2_list[[t]] <- time_hu2
all_mape_histories_hu2_list[[t]] <- all_mape_histories_hu2
}
###########################################
# Rede Neural FF para previsão de cargas
# Configuração dos hiperparâmetros da rede
###########################################
setwd("~/PGMC - 2017-2021/Tese - parte 2/Códigos/MLP - Hiperparâmetros")
##########
# Pacotes
##########
library(erer)
library(fastDummies)
library(ggplot2)
library(keras)
#######################
# Importação dos dados
#######################
data_loads <- read.csv('loadsny1518.csv')
data_temps <- read.csv('tempsny1518.csv')
zone_names <- names(data_loads[,15:25])
temp_names <- names(data_temps)
fd <- 4
ld <- 1461
data_loads$month_sum              <- data_loads$month
data_loads$month_sum[8761:17544]  <- data_loads$month_sum[8761:17544]+12
data_loads$month_sum[17545:26304] <- data_loads$month_sum[17545:26304]+24
data_loads$month_sum[26305:35063] <- data_loads$month_sum[26305:35063]+36
zones_wanted <- c(1,2,4,5,7,9,11)
for(z in zones_wanted[7]) {
Y         <- data_loads[which(data_loads$day > (fd-1) & data_loads$day < (ld-1)),zone_names[z]]
Y24       <- matrix(Y, ncol=24, byrow = T)
month_sum   <- data_loads[which(data_loads$day > (fd-1) & data_loads$day < (ld-1)),'month_sum']
month_sum24 <- matrix(month_sum, ncol=24, byrow = T)
# Separação em treino e validação
indices_tr  <- list()
indices_val <- c()
for (i in 1:8) {
indices_tr[[i]]     <-  1:(i*5+i-1)
indices_val[i]      <-  (i*5)+i
}
Y_hoje    <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),zone_names[z]]
Y_hoje24  <- matrix(Y_hoje, ncol=24, byrow = T)
Y_ontem   <- data_loads[which(data_loads$day > (fd-3) & data_loads$day < (ld-3)),zone_names[z]]
Y_ontem24 <- matrix(Y_ontem, ncol=24, byrow = T)
results_hu_list <- time_hu_list <- all_mse_histories_hu_list <- list()
for(t in 1:11) {
all_mse_histories_hu <- list()
temp <- data_temps[,temp_names[t]]
Xt         <- temp[which(data_loads$day > (fd-1) & data_loads$day < (ld-1))]
Xt24       <- matrix(Xt, ncol=24, byrow = T)
Xt_hoje   <- temp[which(data_loads$day > (fd-2) & data_loads$day < (ld-2))]
Xt_hoje24 <- matrix(Xt_hoje, ncol=24, byrow = T)
Xt_ontem   <- temp[which(data_loads$day > (fd-3) & data_loads$day < (ld-3))]
Xt_ontem24 <- matrix(Xt_ontem, ncol=24, byrow = T)
week                <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'weekday']
week_dummies        <- dummy_cols(week)
week_dummies        <- week_dummies[,-1]
names(week_dummies) <- paste('x',as.character(1:7),sep = '')
week_dummies1 <- matrix(week_dummies$x1, ncol=24, byrow = T)
week_dummies1 <- week_dummies1[,1]
week_dummies2 <- matrix(week_dummies$x2, ncol=24, byrow = T)
week_dummies2 <- week_dummies2[,1]
week_dummies3 <- matrix(week_dummies$x3, ncol=24, byrow = T)
week_dummies3 <- week_dummies3[,1]
week_dummies4 <- matrix(week_dummies$x4, ncol=24, byrow = T)
week_dummies4 <- week_dummies4[,1]
week_dummies5 <- matrix(week_dummies$x5, ncol=24, byrow = T)
week_dummies5 <- week_dummies5[,1]
week_dummies6 <- matrix(week_dummies$x6, ncol=24, byrow = T)
week_dummies6 <- week_dummies6[,1]
week_dummies7 <- matrix(week_dummies$x7, ncol=24, byrow = T)
week_dummies7 <- week_dummies7[,1]
season <- data_loads[which(data_loads$day > (fd-2) & data_loads$day < (ld-2)),'season']
season_dummies <- dummy_cols(season)
season_dummies <- season_dummies[,-1]
names(season_dummies) <- paste('x',as.character(1:4),sep = '')
season_dummies1 <- matrix(season_dummies$x1, ncol=24, byrow = T)
season_dummies1 <- season_dummies1[,1]
season_dummies2 <- matrix(season_dummies$x2, ncol=24, byrow = T)
season_dummies2 <- season_dummies2[,1]
season_dummies3 <- matrix(season_dummies$x3, ncol=24, byrow = T)
season_dummies3 <- season_dummies3[,1]
season_dummies4 <- matrix(season_dummies$x4, ncol=24, byrow = T)
season_dummies4 <- season_dummies4[,1]
X24 <- cbind(Xt_ontem24,
Xt_hoje24,
Xt24,
Y_hoje24,
Y_ontem24,
week_dummies1,
week_dummies2,
week_dummies3,
week_dummies4,
week_dummies5,
week_dummies6,
week_dummies7,
season_dummies1,
season_dummies2,
season_dummies3,
season_dummies4)
colnames(X24) <- paste('X',as.character(1:131),sep='')
set.seed(4488)
lr_best <- read.csv(paste('mlp_lr_results_',zone_names[z],'.csv',sep=''))
lr <- lr_best[t,2]
bs_best <- read.csv(paste('mlp_bs_results_',zone_names[z],'.csv',sep=''))
bs <- bs_best[t,2]
ep_best <- read.csv(paste('mlp_ep_results_',zone_names[z],'.csv',sep=''))
ep <- ep_best[t,2]
set.seed(4488)
units <- sample(10:31,5)
units <- c(32,units)
optimizer <- c('adam','rmsprop','sgd', 'adamax', 'adagrad')
init <- c('random_uniform', 'random_normal', 'glorot_uniform', 'glorot_normal', 'TruncatedNormal')
results_hu <- rbind(c(0,0,0,0,0,0),c(t,0,0,0,0,0),c('hu','mediana','média','mínimo','máximo','desvio-padrão'))
time_hu <- c()
for(hu in units[-1]) {
all_mse_hu <- NULL
start_time <- Sys.time()
for(i in 1:8) {
cat('t #', t, 'Z #',z,' hu #', hu, ': processando amostra de validação #', i, '\n')
indices_train <- indices_tr[[i]]
indice_v      <- indices_val[i]
partial_train_data <- X24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_data           <- X24[which(month_sum24[,1] == indice_v),]
partial_train_targets <- Y24[which(month_sum24[,1] <= indices_train[length(indices_train)]),]
val_targets           <- Y24[which(month_sum24[,1] == indice_v ,),]
mean <- apply(partial_train_data,2,mean)
sd   <- apply(partial_train_data,2,sd)
partial_train_data <- scale(partial_train_data, center = mean, scale = sd)
val_data           <- scale(val_data, center = mean, scale = sd)
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = hu, activation = "relu",
input_shape = c(131),kernel_initializer=init[1]) %>%
layer_dense(units = 24)
model %>% compile(
optimizer = optimizer[1],
loss = "mse",
metrics = c("mse")
)
}
model <- build_model()
k_set_value(model$optimizer$lr, lr)
history <- model %>% fit(
partial_train_data, partial_train_targets,
validation_data = list(val_data, val_targets),
epochs = ep, batch.size = bs, verbose = 0
)
all_mse_hu  <- c(all_mse_hu,history$metrics$val_mse[ep])
}
results_hu <- rbind(results_hu,c(hu,median(all_mse_hu,na.rm=T),mean(all_mse_hu,na.rm=T),min(all_mse_hu,na.rm=T),max(all_mse_hu,na.rm=T),sd(all_mse_hu,na.rm=T)))
all_mse_histories_hu <- c(all_mse_histories_hu,all_mse_hu)
end_time <- Sys.time()
time_hu <- c(time_hu,(end_time - start_time))
}
results_hu_list[[t]] <- results_hu
time_hu_list[[t]] <- time_hu
all_mse_histories_hu_list[[t]] <- all_mse_histories_hu
}
write.list(z = results_hu_list, file = paste('mlp_hu_',zone_names[z],'.csv',sep=''))
}
