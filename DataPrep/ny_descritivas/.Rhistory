xlab('Altura') +
ylab('Frequência') +
theme_classic()
ggplot(data = heights,
aes(x = height, fill = sex)) +
geom_dotplot(binwidth = 0.03,
alpha = 0.5,
dotsize = 0.8) +
xlab('Altura') +
ylab('Frequência') +
labs(fill='Sexo')
theme_classic()
ggplot(data = heights,
aes(x = height, fill = sex)) +
geom_dotplot(binwidth = 0.03,
alpha = 0.5,
dotsize = 0.8) +
xlab('Altura') +
ylab('Frequência') +
labs(fill='Sexo') +
theme_classic()
library(ggplot2)
# Exemplo 1: dados simulados de uma distribuição normal padrão
data <- data.frame(x = rnorm(n = 100,
mean = 0,
sd = 1))
View(data)
library(ggplot2)
# Exemplo 1: dados simulados de uma distribuição normal padrão
set.seed(134)
data <- data.frame(x = rnorm(n = 100,
mean = 0,
sd = 1))
View(data)
library(ggplot2)
# Exemplo 1: dados simulados de uma distribuição normal padrão
set.seed(134)
data <- data.frame(x = rnorm(n = 100,
mean = 0,
sd = 1))
View(data)
View(data)
View(data)
ggplot(data = data,
aes(x = x)) +
geom_dotplot()
alturas <- data.frame(altura =
c(rnorm(n = 50,
mean = 1.65,
sd = 0.089),
rnorm(n = 50,
mean = 1.77,
sd = 0.102)),
sexo = factor(c(rep('F', times = 50),
rep('M', times = 50)))
)
View(alturas)
View(alturas)
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot() +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot() +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 0.8) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2,
binwidth = 0.05) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2,
binwidth = 0.005) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2,
binwidth = 0.02) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2) +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2) +
xlab('Alturas (em metros)') +
ylab('Frequências') +
theme_classic()
ggplot(data = alturas,
aes(x = altura,
fill = sexo)) +
geom_dotplot(alpha = 0.5,
dotsize = 2,
method = 'histodot') +
xlab('Alturas (em metros)') +
ylab('Frequências') +
theme_classic()
library(ggplot2)
salarios <- data.frame(salario =
c(2, 2, 1, 1, 3, 3, 4, 5, 3, 1))
View(salarios)
View(salarios)
ggplot(data = salarios,
aes(x = salario)) +
geom_dotplot()
set.seed(134)
simulados <- data.frame(simulados =
rnorm(n = 100, mean = 0, sd = 1))
View(simulados)
View(simulados)
ggplot(data = simulados,
aes(x = simulados)) +
geom_dotplot()
simulados <- data.frame(simulados =
rnorm(n = 500, mean = 0, sd = 1))
ggplot(data = simulados,
aes(x = simulados)) +
geom_dotplot()
simulados <- data.frame(simulados =
rnorm(n = 100, mean = 0, sd = 1))
ggplot(data = simulados,
aes(x = simulados)) +
geom_dotplot()
salarios <- data.frame(salarios = c(2, 2, 1, 1, 3, 3, 4, 5, 3, 1))
View(salarios)
View(salarios)
ggplot(data = salarios,
aes(x = salarios)) +
geom_dotplot()
library(ggplot2)
ggplot(data = salarios,
aes(x = salarios)) +
geom_dotplot()
alturas <- data.frame(altura = c(rnorm(n = 50, mean = 1.65, sd = 0.089),
rnorm(n = 50, mean = 1.77, sd = 0.102)),
sexo = factor(c(rep('F', times = 50),
rep('M', times = 50)))
)
View(alturas)
View(alturas)
ggplot(data = alturas,
aes(x = altura),
color = sexo) +
geom_dotplo()
ggplot(data = alturas,
aes(x = altura),
color = sexo) +
geom_dotplot()
ggplot(data = alturas,
aes(x = altura, color = sexo)) +
geom_dotplot()
ggplot(data = alturas,
aes(x = altura, fill = sexo)) +
geom_dotplot()
ggplot(data = alturas,
aes(x = altura, fill = sexo, alpha = 0.8)) +
geom_dotplot(binwidth = 0.002) +
theme_classic()
ggplot(data = alturas,
aes(x = altura, fill = sexo, alpha = 0.8)) +
geom_dotplot(binwidth = 0.02) +
theme_classic()
ggplot(data = alturas,
aes(x = altura, fill = sexo, alpha = 0.8)) +
geom_dotplot() +
theme_classic()
ggplot(data = alturas,
aes(x = altura, fill = sexo, alpha = 0.8)) +
geom_dotplot(binwidth = 0.02) +
theme_classic()
ggplot(data = alturas,
aes(x = altura, alpha = 0.8)) +
geom_dotplot() +
theme_classic()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot() +
theme_classic()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot(method = 'histodot') +
theme_classic()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot(method = 'histodot', binwidth = 0.02) +
theme_classic()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot(method = 'histodot', binwidth = 0.5) +
theme_classic()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot(method = 'histodot', binwidth = 0.05) +
theme_classic()
ggplot(data = alturas,
aes(x = altura)) +
geom_dotplot(method = 'histodot', binwidth = 0.03) +
theme_classic()
ggplot(data = alturas,
aes(x = altura, fill = sexo)) +
geom_dotplot(method = 'histodot', binwidth = 0.03) +
theme_classic()
ggplot(data = alturas,
aes(x = altura, fill = sexo)) +
geom_dotplot(method = 'histodot', binwidth = 0.03,
alpha = 0.8) +
theme_classic()
ggplot(data = alturas,
aes(x = altura, fill = sexo)) +
geom_dotplot(method = 'histodot', binwidth = 0.03,
alpha = 0.4) +
theme_classic()
cargas <- read_delim("cargas_1518_untidy.csv", ",")
#--------------------------------------------------
library(readr)
library(ggplot2)
library(cowplot)
library(showtext)
library(scales)
library(tidyverse)
library(plyr)
library(TTR)
library(pastecs)
library(psych)
library(dplyr)
library(stringr)
cargas <- read_delim("cargas_1518_untidy.csv", ",")
#--------------------------------------------------
setwd("~/PGMC 31-07-2020 on/Tese/Código/Cap2")
cargas <- read_delim("cargas_1518_untidy.csv", ",")
cargas <- read_delim("cargas_1518_ny_untidy.csv", ",")
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
cargas$Estacao <- factor(cargas$Estacao, levels = c(2,4))
cargas <- cargas[order(cargas$Estacao),]
cargas_verao   <- cargas[13:8849,]
cargas_inverno <- cargas[9093:17510,]
k1 <- 6
k2 <- 4
cargas_verao <-   cargas_verao[((1 + 168*k1):(336 + 168*k1)),]
cargas_inverno <- cargas_inverno[((1 + 168*k2):(336 + 168*k2)),]
cargas <- rbind(cargas_verao, cargas_inverno)
cargas$index <- c(1:336, 1:336)
cargas$Estacao <- revalue(cargas$Estacao, c("2"="Verão", "4"="Inverno"))
ggplot(cargas, aes(x = index, y = CENTRL)) +
labs(x = "", y = "Carga (MW)", color = '') +
geom_line(aes(color = Estacao), size = 1.2) +
tema_graficos_1 +
theme(axis.text.x = element_text(size=0,family="lm10")) +
theme(axis.ticks.x = element_blank()) +
scale_color_manual(values=c("#e21464", "#32228c")) +
scale_x_continuous(limits=c(1,336), breaks=seq(0, 336, 24), minor_breaks=seq(0,336,24), expand = c(0, 0))
font_add("lm10", regular = "lmroman10-regular.otf",
bold = "lmroman10-Bold.otf")
showtext_auto()
#--------------------------------------------------
# Tema para os gráficos ----
#--------------------------------------------------
tema_graficos_1 <- theme(axis.title.x = element_text(size=14, family="lm10", face = 'bold'),
axis.title.y = element_text(size=20, family="lm10", face = 'bold'),
axis.line = element_line(size = 1),
axis.text.x = element_text(size=12, family="lm10"),
axis.text.y = element_text(size=12, family="lm10"),
legend.text = element_text(size=12, family="lm10"),
legend.title = element_text(size=0, family="lm10"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.background = element_blank(),
legend.key = element_blank())
ggplot(cargas, aes(x = index, y = CENTRL)) +
labs(x = "", y = "Carga (MW)", color = '') +
geom_line(aes(color = Estacao), size = 1.2) +
tema_graficos_1 +
theme(axis.text.x = element_text(size=0,family="lm10")) +
theme(axis.ticks.x = element_blank()) +
scale_color_manual(values=c("#e21464", "#32228c")) +
scale_x_continuous(limits=c(1,336), breaks=seq(0, 336, 24), minor_breaks=seq(0,336,24), expand = c(0, 0))
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
# Filtra para estação CENTRL e para inverno e verão ----
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
cargas <- cargas %>% filter(Data = )
# Converte estação do ano para fator ----
cargas$Estacao <- factor(cargas$Estacao, levels = c(2,4))
# Ordena ----
cargas <- cargas[order(cargas$Estacao),]
View(cargas)
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
View(cargas)
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
# Filtra para estação CENTRL e para inverno e verão ----
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
cargas <- cargas %>% filter(DiaJuliano %in% 2911:3246 || DiaJuliano %in% 769:1103)
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
# Lê arquivo csv ----
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
# Filtra para estação CENTRL e para inverno e verão ----
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
cargas <- cargas[c(769:1103, 2911:3246),]
336+336
1103-769
2911-3246
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
# Filtra para estação CENTRL e para inverno e verão ----
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
View(cargas)
cargas <- cargas[c(769:1104, 2911:3246),]
cargas$Estacao <- factor(cargas$Estacao, levels = c(2,4))
cargas <- cargas[order(cargas$Estacao),]
cargas$index <- c(1:336, 1:336)
cargas$Estacao <- revalue(cargas$Estacao, c("2"="Verão", "4"="Inverno"))
ggplot(cargas, aes(x = index, y = CENTRL)) +
labs(x = "", y = "Carga (MW)", color = '') +
geom_line(aes(color = Estacao), size = 1.2) +
tema_graficos_1 +
theme(axis.text.x = element_text(size=0,family="lm10")) +
theme(axis.ticks.x = element_blank()) +
scale_color_manual(values=c("#e21464", "#32228c")) +
scale_x_continuous(limits=c(1,336), breaks=seq(0, 336, 24), minor_breaks=seq(0,336,24), expand = c(0, 0))
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
# Filtra para estação CENTRL e para inverno e verão ----
cargas <- cargas %>%
select(Data, DiaJuliano, DiaSemana, Hora, Estacao, CENTRL) %>%
filter(cargas$Estacao == 2 | cargas$Estacao == 4)
# Seleciona amostra por conveniência
# Datas escolhidas por conveniência: 03/08 a 16/08 de 2015 para o verão; 02/02/2015 a 15/02/2015 para o inverno.
cargas <- cargas[c(769:1104, 2911:3246),]
# Converte estação do ano para fator ----
cargas$Estacao <- factor(cargas$Estacao, levels = c(2,4))
# Índice para as horas ----
cargas$index <- c(1:336, 1:336)
# Muda o nome das estações, para aparecerem na legenda do gráfico ----
cargas$Estacao <- revalue(cargas$Estacao, c("2"="Verão", "4"="Inverno"))
# Cria objeto para o gráfico ----
fig2_6 <- ggplot(cargas, aes(x = index, y = CENTRL)) +
labs(x = "", y = "Carga (MW)", color = '') +
geom_line(aes(color = Estacao), size = 1.2) +
tema_graficos_1 +
theme(axis.text.x = element_text(size=0,family="lm10")) +
theme(axis.ticks.x = element_blank()) +
scale_color_manual(values=c("#e21464", "#32228c")) +
scale_x_continuous(limits=c(1,336), breaks=seq(0, 336, 24), minor_breaks=seq(0,336,24), expand = c(0, 0))
# Mostra figura na tela ----
print(fig2_6)
cargas <- read_delim("loads_ny_1518_untidy.csv", ",")
temps <- read_delim("temps_ny_1518_untidy.csv", ",")
View(cargas)
cargas <- read_delim("loads_ny_1518_untidy.csv", ",")
temps <- read_delim("temps_ny_1518_untidy.csv", ",")
View(cargas)
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
temps <- read_delim("clima_ny_1518_untidy.csv", ",")
temps <- read_delim("temps_ny_1518_untidy.csv", ",")
View(cargas)
names(cargas)[6] <- 'HUDVL'
names(cargas)[8] <- 'MHKVL'
View(temps)
temps$Estacao <- cargas$Estacao
temps$Dias <- cargas$Dias
temps_agg <- aggregate(cbind(ALB, ART, BGM, BUF, ELM, HPN, JFK, LGA, MSS, MSV, PBG, POU, RME, ROC, SWF, SYR) ~ Dias + Estacao, data = temps, FUN = mean, na.rm = TRUE)
View(temps_agg)
df <- cbind(cargas_agg, temps_agg[,3:18])
cargas_agg <- aggregate(cbind(WEST, GENESE, CENTRL, NORTH, MHKVL, CAPITL, HUDVL) ~ Dias + Estacao, data = cargas, FUN = mean, na.rm = TRUE)
df <- cbind(cargas_agg, temps_agg[,3:18])
df$Estacao <- factor(df$Estacao)
df$Estacao <- revalue(df$Estacao, c("1" = "Primavera", "2"="Verão", "3" = "Outono", "4"="Inverno"))
ggplot(df, aes(x = BUF, y = WEST)) +
labs(x = "Temperatura média diária (ºC)", y = "Carga média diária (MW)", color = '') +
geom_point(aes(color = Estacao), alpha = 0.8, size = 2.5) +
tema_graficos_1 +
scale_color_manual(values=c("Inverno" = "#d10000", "Verão" = "#ffa600", "Outono" = "#7a5195","Primavera" = "#ef5675"))
ggplot(df, aes(x = BUF, y = WEST)) +
labs(x = "Temperatura média diária (ºC)", y = "Carga média diária (MW)", color = '') +
geom_point(aes(color = Estacao), alpha = 0.8, size = 2.5) +
tema_graficos_1 +
scale_color_manual(values=c("Primavera" = "#ef5675", "Verão" = "#ffa600", "Outono" = "#7a5195", "Inverno" = "#d10000"))
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
temps <- read_delim("temps_ny_1518_untidy.csv", ",")
names(cargas)[6] <- 'HUDVL'
names(cargas)[8] <- 'MHKVL'
# Calcula cargas médias diárias por estação (considerando que alguns dias tem duas estações) ----
cargas_agg <- aggregate(cbind(WEST, GENESE, CENTRL, NORTH, MHKVL, CAPITL, HUDVL) ~ Dias + Estacao, data = cargas, FUN = mean, na.rm = TRUE)
# Acrescenta colunas de estação e dia ao data frame de temperaturas ----
temps$Estacao <- cargas$Estacao
temps$Dias <- cargas$Dias
# Calcula temperaturas médias diárias por estação (considerando que alguns dias tem duas estações) ----
temps_agg <- aggregate(cbind(ALB, ART, BGM, BUF, ELM, HPN, JFK, LGA, MSS, MSV, PBG, POU, RME, ROC, SWF, SYR) ~ Dias + Estacao, data = temps, FUN = mean, na.rm = TRUE)
# Cria data frame completo ----
df <- cbind(cargas_agg, temps_agg[,3:18])
# Transforma estação do ano em fator e renomeia ----
df$Estacao <- factor(df$Estacao)
df$Estacao <- revalue(df$Estacao, c("1" = "Primavera", "2"="Verão", "3" = "Outono", "4"="Inverno"))
# Remove  objetos que não são mais necessários ----
rm(cargas)
rm(temps)
rm(cargas_agg)
rm(temps_agg)
ggplot(df, aes(x = BUF, y = WEST)) +
labs(x = "Temperatura média diária (ºC)", y = "Carga média diária (MW)", color = '') +
geom_point(alpha = 0.8, size = 2.5) +
facet_wrap(~ Estacao) +
theme(strip.text.x = element_text(size=18, family="lm10", face = 'bold')) +
theme(strip.text = element_text(size = 20)) +
tema_graficos_1 +
scale_color_manual(values=c("Inverno" = "#003f5c", "Verão" = "#ffa600", "Outono" = "#7a5195","Primavera" = "#ef5675"))
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
temps <- read_delim("temps_ny_1518_untidy.csv", ",")
names(cargas)[6] <- 'HUDVL'
names(cargas)[8] <- 'MHKVL'
# Calcula cargas médias diárias por estação (considerando que alguns dias tem duas estações) ----
cargas_agg <- aggregate(cbind(WEST, GENESE, CENTRL, NORTH, MHKVL, CAPITL, HUDVL) ~ Dias + Estacao, data = cargas, FUN = mean, na.rm = TRUE)
# Acrescenta colunas de estação e dia ao data frame de temperaturas ----
temps$Estacao <- cargas$Estacao
temps$Dias <- cargas$Dias
# Calcula temperaturas médias diárias por estação (considerando que alguns dias tem duas estações) ----
temps_agg <- aggregate(cbind(ALB, ART, BGM, BUF, ELM, HPN, JFK, LGA, MSS, MSV, PBG, POU, RME, ROC, SWF, SYR) ~ Dias + Estacao, data = temps, FUN = mean, na.rm = TRUE)
# Cria data frame completo ----
df <- cbind(cargas_agg, temps_agg[,3:18])
# Transforma estação do ano em fator e renomeia ----
df$Estacao <- factor(df$Estacao)
df$Estacao <- revalue(df$Estacao, c("1" = "Primavera", "2"="Verão", "3" = "Outono", "4"="Inverno"))
ggplot(df, aes(x = BUF, y = WEST)) +
labs(x = "Temperatura média diária (ºC)", y = "Carga média diária (MW)", color = '') +
geom_point(alpha = 0.8, size = 2.5) +
facet_wrap(~ Estacao) +
theme(strip.text.x = element_text(size=18, family="lm10", face = 'bold')) +
theme(strip.text = element_text(size = 20)) +
tema_graficos_1
View(df)
df$Estacao <- factor(df$Estacao, levels = "Inverno", "Primavera", "Verão", "Outono")
ggplot(df, aes(x = BUF, y = WEST)) +
labs(x = "Temperatura média diária (ºC)", y = "Carga média diária (MW)", color = '') +
geom_point(alpha = 0.8, size = 2.5) +
facet_wrap(~ Estacao) +
theme(strip.text.x = element_text(size=18, family="lm10", face = 'bold')) +
theme(strip.text = element_text(size = 20)) +
tema_graficos_1
cargas <- read_delim("cargas_ny_1518_untidy.csv", ",")
temps <- read_delim("temps_ny_1518_untidy.csv", ",")
describeBy(cargas$CAPITL, cargas$season)
describeBy(cargas$CAPITL, cargas$Estacao)
olar <- describeBy(cargas$CAPITL, cargas$Estacao)
View(olar)
descritivas <- describeBy(temps$BUF, cargas$Estacao)
descritivas_estacao <- c(descritivas$`1`$min, descritivas$`1`$max, descritivas$`1`$median, descritivas$`1`$mean, descritivas$`1`$sd)
descritivas_estacao <- rbind(descritivas_estacao, c(descritivas$`2`$min, descritivas$`2`$max, descritivas$`2`$median, descritivas$`2`$mean, descritivas$`2`$sd))
descritivas_estacao <- rbind(descritivas_estacao, c(descritivas$`3`$min, descritivas$`3`$max, descritivas$`3`$median, descritivas$`3`$mean, descritivas$`3`$sd))
descritivas_estacao <- rbind(descritivas_estacao, c(descritivas$`4`$min, descritivas$`4`$max, descritivas$`4`$median, descritivas$`4`$mean, descritivas$`4`$sd))
descritivas_estacao <- data.frame(descritivas_estacao)
View(descritivas_estacao)
colnames(descritivas_estacao) <- c('Mínimo', 'Máximo', 'Mediana', 'Média', 'Desvio padrão')
rownames(descritivas_estacao) <- c('Primavera', 'Verão', 'Outono', 'Inverno')
View(descritivas_estacao)
df <- cbind(cargas, temps)
ddply(df, .(season), summarise, "corr" = cor(BUF,WEST))
ddply(df, .(Estacao), summarise, "corr" = cor(BUF,WEST))
setwd("~/PGMC 31-07-2020 on/Tese/Código/Cap2/cargas_ny_escritivas/")
setwd("~/PGMC 31-07-2020 on/Tese/Código/Cap2/cargas_ny_descritivas/")
setwd("~/PGMC 31-07-2020 on/Tese/Código/DataPrep/ny_descritivas/")
write.csv(descritivas_estacao, "descritivas_temps_BUF.csv")
